[section Behind the Interface]

The implementation is private. Not only notionally declared as such, not merely separated into another class or a header file, but truly internal and hidden. Behing the interface it is all for developers to implement, to optimize, to modify, to improve as they need. 

Still, the deployment pattern is easy to remember and fairly straightforward to follow. Something like the following will be tucked away in an implementation or a private header file separate from the public interface and far from the user eyes: 

 template<> struct pimpl<Book>::implementation
 {
    implementation(string const& the_title, string const& the_author)
    :
        title(the_title), author(the_author), price(0)
    {}
    ...
    string  title;
    string author;
    int     price;
 };
  
 Book::Book(string const& title, string const& author)
 :
    base_type(title, author)
 {}
 
 string const&
 Book::author() const
 {
    return (*this)->author;
 }
  
 void
 Book::price(int new_price)
 {
    (*this)->price = new_price;
 }

In addition, if comparison functionality is required, as mentioned earlier, a class with value semantics will have to implement something like the following:  
 
 bool
 Book::operator==(Book const& other) const
 {
    implementation const& impl = **this;
    return impl.title = other.title && impl.author == other.author;
 }
 
In that simple example ['pimpl<Book>::implementation] is again a ['struct] rather than a ['class]. As long as the declaration is local to one (implementation) file, there is generally little value in making it a class. 

Another liberating and unifying feature is that we do not have to follow (and fight over) a particular naming convention to draw attention to member variables (like the trailing underscore, the 'm_' prefix or the myriad others). Member variables are accessed and clearly identified as impl.title or (*this)->title or something of that sort.

In that simple example the public ['Book] class describes and implements the behavior and the internal ['pimpl<Book>::implementation] is all about data. However, as the functionality grows it is not uncommon for ['pimpl<Book>::implementation] to have/implement certain internal behavior:

 template<> struct pimpl<Book>::implementation
 {  ...
    bool check_isbn_10_digit();
 };

 bool
 Book::some_function() const
 {  ...
    bool is_valid = (*this)->check_isbn_10_digit();
    ...
 }

[endsect]
