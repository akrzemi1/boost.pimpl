[section Pimpl with Value Semantics]

['Pimpl] with ['value semantics] exhibits different relationship with the underlying data. It solely owns and manages the data (rather than shares). Consequently, for such ['Pimpls] manual implementation gets more involved and might look as follows:

 class Book
 {
    public:
  
    Book(string const& title, string const& author);

    Book(Book const&);
    Book& operator=(Book const&);
  
    string const&  title() const;
    string const& author() const;
    
    bool operator==(Book const&) const;
    bool operator!=(Book const&) const;
  
    private:
  
    struct implementation;
    std::unique_ptr<implementation> impl_;
 };

Again, the code can be shrunk down to: 

 struct Book : public pimpl<Book>::value_semantics
 {
    Book(string const& title, string const& author);
    
    string const&  title() const;
    string const& author() const;
    
    bool operator==(Book const&) const;
 };

with no loss in functionality and with the same benefits as before -- shorter, application-focused and reasonably self-documented.

A notable difference (compared to pointer-semantics classes) is that the ['Book::operator==()] is not a freebie. In fact, comparison operators are never freebies (they are never auto-generated). However, in the case of pointer-semantics classes those comparison operators are reduced to pointer comparisons and generalized. Clearly, that's not the case with value-semantics classes. Consequently, for value-semantics classes the comparison operators become part of the user-provided interface (if such a class needs to be comparable).
  
So far both examples of ['Pimpl]-based ['Book] classes (with pointer- and value-semantics) look almost identical and internal implementations (as we'll see later) are as close. That property is important for orderly and healthy evolution of commercial large-scale systems as it allows to minimize the impact of a requirement change -- something as inevitable as "death and taxes". 

[endsect]

